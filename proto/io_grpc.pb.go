// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FilesTransferClient is the client API for FilesTransfer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FilesTransferClient interface {
	Download(ctx context.Context, in *FileInfo, opts ...grpc.CallOption) (FilesTransfer_DownloadClient, error)
	Upload(ctx context.Context, opts ...grpc.CallOption) (FilesTransfer_UploadClient, error)
}

type filesTransferClient struct {
	cc grpc.ClientConnInterface
}

func NewFilesTransferClient(cc grpc.ClientConnInterface) FilesTransferClient {
	return &filesTransferClient{cc}
}

func (c *filesTransferClient) Download(ctx context.Context, in *FileInfo, opts ...grpc.CallOption) (FilesTransfer_DownloadClient, error) {
	stream, err := c.cc.NewStream(ctx, &FilesTransfer_ServiceDesc.Streams[0], "/Io.FilesTransfer/Download", opts...)
	if err != nil {
		return nil, err
	}
	x := &filesTransferDownloadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FilesTransfer_DownloadClient interface {
	Recv() (*Chunk, error)
	grpc.ClientStream
}

type filesTransferDownloadClient struct {
	grpc.ClientStream
}

func (x *filesTransferDownloadClient) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *filesTransferClient) Upload(ctx context.Context, opts ...grpc.CallOption) (FilesTransfer_UploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &FilesTransfer_ServiceDesc.Streams[1], "/Io.FilesTransfer/Upload", opts...)
	if err != nil {
		return nil, err
	}
	x := &filesTransferUploadClient{stream}
	return x, nil
}

type FilesTransfer_UploadClient interface {
	Send(*Packet) error
	CloseAndRecv() (*Status, error)
	grpc.ClientStream
}

type filesTransferUploadClient struct {
	grpc.ClientStream
}

func (x *filesTransferUploadClient) Send(m *Packet) error {
	return x.ClientStream.SendMsg(m)
}

func (x *filesTransferUploadClient) CloseAndRecv() (*Status, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Status)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FilesTransferServer is the server API for FilesTransfer service.
// All implementations must embed UnimplementedFilesTransferServer
// for forward compatibility
type FilesTransferServer interface {
	Download(*FileInfo, FilesTransfer_DownloadServer) error
	Upload(FilesTransfer_UploadServer) error
	mustEmbedUnimplementedFilesTransferServer()
}

// UnimplementedFilesTransferServer must be embedded to have forward compatible implementations.
type UnimplementedFilesTransferServer struct {
}

func (UnimplementedFilesTransferServer) Download(*FileInfo, FilesTransfer_DownloadServer) error {
	return status.Errorf(codes.Unimplemented, "method Download not implemented")
}
func (UnimplementedFilesTransferServer) Upload(FilesTransfer_UploadServer) error {
	return status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedFilesTransferServer) mustEmbedUnimplementedFilesTransferServer() {}

// UnsafeFilesTransferServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FilesTransferServer will
// result in compilation errors.
type UnsafeFilesTransferServer interface {
	mustEmbedUnimplementedFilesTransferServer()
}

func RegisterFilesTransferServer(s grpc.ServiceRegistrar, srv FilesTransferServer) {
	s.RegisterService(&FilesTransfer_ServiceDesc, srv)
}

func _FilesTransfer_Download_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FileInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FilesTransferServer).Download(m, &filesTransferDownloadServer{stream})
}

type FilesTransfer_DownloadServer interface {
	Send(*Chunk) error
	grpc.ServerStream
}

type filesTransferDownloadServer struct {
	grpc.ServerStream
}

func (x *filesTransferDownloadServer) Send(m *Chunk) error {
	return x.ServerStream.SendMsg(m)
}

func _FilesTransfer_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FilesTransferServer).Upload(&filesTransferUploadServer{stream})
}

type FilesTransfer_UploadServer interface {
	SendAndClose(*Status) error
	Recv() (*Packet, error)
	grpc.ServerStream
}

type filesTransferUploadServer struct {
	grpc.ServerStream
}

func (x *filesTransferUploadServer) SendAndClose(m *Status) error {
	return x.ServerStream.SendMsg(m)
}

func (x *filesTransferUploadServer) Recv() (*Packet, error) {
	m := new(Packet)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FilesTransfer_ServiceDesc is the grpc.ServiceDesc for FilesTransfer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FilesTransfer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Io.FilesTransfer",
	HandlerType: (*FilesTransferServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Download",
			Handler:       _FilesTransfer_Download_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Upload",
			Handler:       _FilesTransfer_Upload_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "io.proto",
}
